type token =
  | SEQUENCE
  | LBLOCK
  | RBLOCK
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | SEMI
  | COMMA
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | EXPONENT
  | MODULUS
  | ASSIGN
  | ASSIGNADD
  | ASSIGNMINUS
  | ASSIGNTIMES
  | ASSIGNDIVIDE
  | NOT
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | AND
  | OR
  | RETURN
  | IF
  | ELSE
  | ELIF
  | FOR
  | WHILE
  | BREAK
  | CONTINUE
  | DEF
  | INT
  | BOOL
  | FLOAT
  | VOID
  | CHAR
  | STRING
  | LIST
  | IMAGE
  | PIXEL
  | MATRIX
  | COLON
  | CONV
  | LITERAL of (int)
  | BLIT of (bool)
  | ID of (string)
  | FLIT of (string)
  | LITERALSTRING of (string)
  | LITERALCHAR of (char)
  | EOF

open Parsing;;
let _ = parse_error;;
# 4 "parser.mly"
open Ast
# 65 "parser.ml"
let yytransl_const = [|
  257 (* SEQUENCE *);
  258 (* LBLOCK *);
  259 (* RBLOCK *);
  260 (* LPAREN *);
  261 (* RPAREN *);
  262 (* LBRACE *);
  263 (* RBRACE *);
  264 (* SEMI *);
  265 (* COMMA *);
  266 (* PLUS *);
  267 (* MINUS *);
  268 (* TIMES *);
  269 (* DIVIDE *);
  270 (* EXPONENT *);
  271 (* MODULUS *);
  272 (* ASSIGN *);
  273 (* ASSIGNADD *);
  274 (* ASSIGNMINUS *);
  275 (* ASSIGNTIMES *);
  276 (* ASSIGNDIVIDE *);
  277 (* NOT *);
  278 (* EQ *);
  279 (* NEQ *);
  280 (* LT *);
  281 (* LEQ *);
  282 (* GT *);
  283 (* GEQ *);
  284 (* AND *);
  285 (* OR *);
  286 (* RETURN *);
  287 (* IF *);
  288 (* ELSE *);
  289 (* ELIF *);
  290 (* FOR *);
  291 (* WHILE *);
  292 (* BREAK *);
  293 (* CONTINUE *);
  294 (* DEF *);
  295 (* INT *);
  296 (* BOOL *);
  297 (* FLOAT *);
  298 (* VOID *);
  299 (* CHAR *);
  300 (* STRING *);
  301 (* LIST *);
  302 (* IMAGE *);
  303 (* PIXEL *);
  304 (* MATRIX *);
  305 (* COLON *);
  306 (* CONV *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  307 (* LITERAL *);
  308 (* BLIT *);
  309 (* ID *);
  310 (* FLIT *);
  311 (* LITERALSTRING *);
  312 (* LITERALCHAR *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\004\000\006\000\006\000\009\000\
\009\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
\005\000\005\000\005\000\007\000\007\000\010\000\008\000\008\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\012\000\012\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\011\000\013\000\
\013\000\014\000\014\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\002\000\009\000\000\000\001\000\002\000\
\004\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\000\000\002\000\003\000\000\000\002\000\
\002\000\002\000\003\000\004\000\008\000\010\000\006\000\009\000\
\004\000\001\000\000\000\001\000\001\000\001\000\001\000\001\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\002\000\002\000\003\000\
\004\000\003\000\003\000\003\000\003\000\004\000\003\000\000\000\
\001\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\068\000\000\000\023\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\010\000\011\000\012\000\013\000\
\014\000\016\000\015\000\017\000\018\000\019\000\037\000\039\000\
\000\000\038\000\001\000\003\000\004\000\000\000\034\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\026\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\025\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\027\000\
\024\000\000\000\000\000\063\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\022\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\033\000\062\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\008\000\000\000\000\000\
\031\000\000\000\000\000\020\000\000\000\000\000\000\000\000\000\
\009\000\000\000\000\000\000\000\000\000\021\000\000\000\032\000\
\000\000\005\000\030\000"

let yydgoto = "\002\000\
\003\000\004\000\065\000\029\000\034\000\103\000\120\000\033\000\
\104\000\031\000\032\000\039\000\073\000\074\000"

let yysindex = "\014\000\
\000\000\000\000\000\000\067\005\000\000\195\255\195\255\195\255\
\195\255\195\255\013\255\195\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\002\255\000\000\000\000\000\000\000\000\227\254\000\000\168\005\
\126\255\240\254\197\005\244\254\244\254\077\006\000\000\246\005\
\195\255\019\006\195\255\195\255\195\255\195\255\195\255\195\255\
\027\255\000\000\195\255\195\255\195\255\195\255\195\255\195\255\
\195\255\195\255\195\255\195\255\195\255\195\255\195\255\000\000\
\000\000\252\254\036\255\000\000\120\005\033\255\120\005\077\006\
\048\255\045\255\077\006\077\006\077\006\077\006\077\006\000\000\
\029\004\195\255\248\254\248\254\244\254\244\254\217\005\217\005\
\001\255\001\255\001\255\001\255\118\006\097\006\077\006\009\255\
\000\255\195\255\000\000\000\000\195\255\007\255\056\255\053\255\
\077\006\120\005\195\255\226\005\077\006\000\000\061\255\029\004\
\000\000\048\006\195\255\000\000\011\255\120\005\064\255\029\004\
\000\000\034\255\120\005\019\255\179\255\000\000\120\005\000\000\
\070\255\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\211\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\055\000\109\000\164\004\000\000\000\000\
\065\255\000\000\069\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\018\255\
\000\000\073\255\043\003\097\003\151\003\205\003\003\004\000\000\
\075\255\000\000\015\001\069\001\163\000\217\000\083\002\137\002\
\123\001\177\001\231\001\029\002\191\002\245\002\057\004\000\000\
\014\005\000\000\000\000\000\000\000\000\000\000\000\000\082\255\
\111\004\000\000\000\000\000\000\025\255\000\000\000\000\000\000\
\000\000\000\000\083\255\000\000\000\000\000\000\000\000\005\255\
\000\000\217\004\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\255\255\000\000\252\255\000\000\000\000\211\255\
\000\000\239\255\038\000\217\255\000\000\000\000"

let yytablesize = 1960
let yytable = "\030\000\
\040\000\070\000\028\000\053\000\054\000\043\000\023\000\023\000\
\023\000\080\000\051\000\052\000\053\000\054\000\001\000\023\000\
\041\000\044\000\045\000\046\000\047\000\048\000\066\000\049\000\
\082\000\023\000\066\000\080\000\066\000\067\000\081\000\106\000\
\107\000\067\000\023\000\023\000\067\000\063\000\023\000\023\000\
\098\000\063\000\082\000\035\000\036\000\037\000\038\000\040\000\
\096\000\042\000\063\000\082\000\100\000\101\000\054\000\023\000\
\023\000\023\000\023\000\110\000\111\000\112\000\116\000\121\000\
\066\000\127\000\066\000\097\000\123\000\099\000\080\000\129\000\
\035\000\064\000\125\000\119\000\102\000\065\000\038\000\006\000\
\072\000\075\000\076\000\077\000\078\000\079\000\007\000\035\000\
\083\000\084\000\085\000\086\000\087\000\088\000\089\000\090\000\
\091\000\092\000\093\000\094\000\095\000\066\000\126\000\000\000\
\113\000\000\000\000\000\117\000\055\000\000\000\000\000\000\000\
\000\000\066\000\000\000\124\000\122\000\000\000\066\000\105\000\
\066\000\128\000\066\000\000\000\000\000\131\000\000\000\005\000\
\064\000\006\000\000\000\000\000\000\000\000\000\000\000\108\000\
\007\000\000\000\109\000\000\000\000\000\000\000\000\000\000\000\
\114\000\000\000\008\000\000\000\000\000\000\000\000\000\000\000\
\038\000\000\000\000\000\009\000\010\000\000\000\000\000\011\000\
\012\000\000\000\043\000\000\000\013\000\014\000\015\000\016\000\
\017\000\018\000\019\000\020\000\021\000\022\000\000\000\000\000\
\023\000\024\000\025\000\026\000\005\000\130\000\006\000\000\000\
\000\000\000\000\000\000\000\000\000\000\007\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\006\000\008\000\
\000\000\000\000\000\000\000\000\000\000\007\000\000\000\000\000\
\009\000\010\000\000\000\000\000\011\000\012\000\000\000\008\000\
\044\000\013\000\014\000\015\000\016\000\017\000\018\000\019\000\
\020\000\021\000\022\000\000\000\000\000\023\000\024\000\025\000\
\026\000\013\000\014\000\015\000\016\000\017\000\018\000\019\000\
\020\000\021\000\022\000\000\000\000\000\023\000\024\000\025\000\
\026\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\040\000\040\000\040\000\000\000\040\000\000\000\000\000\
\040\000\040\000\040\000\040\000\040\000\040\000\041\000\000\000\
\000\000\000\000\000\000\000\000\000\000\040\000\040\000\040\000\
\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
\040\000\040\000\040\000\040\000\000\000\000\000\000\000\040\000\
\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
\040\000\040\000\040\000\040\000\040\000\040\000\040\000\054\000\
\054\000\054\000\054\000\054\000\000\000\000\000\054\000\054\000\
\054\000\054\000\054\000\054\000\042\000\000\000\000\000\000\000\
\000\000\000\000\000\000\054\000\054\000\054\000\054\000\054\000\
\054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
\054\000\054\000\000\000\000\000\000\000\054\000\054\000\054\000\
\054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
\000\000\054\000\054\000\054\000\054\000\055\000\055\000\055\000\
\055\000\055\000\000\000\000\000\055\000\055\000\055\000\055\000\
\055\000\055\000\047\000\000\000\000\000\000\000\000\000\000\000\
\000\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
\055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
\000\000\000\000\000\000\055\000\055\000\055\000\055\000\055\000\
\055\000\055\000\055\000\055\000\055\000\055\000\000\000\055\000\
\055\000\055\000\055\000\043\000\043\000\043\000\043\000\043\000\
\000\000\000\000\043\000\043\000\043\000\043\000\043\000\043\000\
\048\000\000\000\000\000\000\000\000\000\000\000\000\000\043\000\
\043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
\043\000\043\000\043\000\043\000\043\000\043\000\000\000\000\000\
\000\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
\043\000\043\000\043\000\043\000\000\000\043\000\043\000\043\000\
\043\000\044\000\044\000\044\000\044\000\044\000\000\000\000\000\
\044\000\044\000\044\000\044\000\044\000\044\000\049\000\000\000\
\000\000\000\000\000\000\000\000\000\000\044\000\044\000\044\000\
\044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
\044\000\044\000\044\000\044\000\000\000\000\000\000\000\044\000\
\044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
\044\000\044\000\000\000\044\000\044\000\044\000\044\000\041\000\
\041\000\041\000\041\000\041\000\000\000\000\000\041\000\041\000\
\041\000\041\000\000\000\000\000\050\000\000\000\000\000\000\000\
\000\000\000\000\000\000\041\000\041\000\041\000\041\000\041\000\
\041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
\041\000\041\000\000\000\000\000\000\000\041\000\041\000\041\000\
\041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
\000\000\041\000\041\000\041\000\041\000\042\000\042\000\042\000\
\042\000\042\000\000\000\000\000\042\000\042\000\042\000\042\000\
\000\000\000\000\045\000\000\000\000\000\000\000\000\000\000\000\
\000\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
\042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
\000\000\000\000\000\000\042\000\042\000\042\000\042\000\042\000\
\042\000\042\000\042\000\042\000\042\000\042\000\000\000\042\000\
\042\000\042\000\042\000\047\000\047\000\047\000\047\000\047\000\
\000\000\000\000\047\000\047\000\000\000\000\000\000\000\000\000\
\046\000\000\000\000\000\000\000\000\000\000\000\000\000\047\000\
\047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
\047\000\047\000\047\000\047\000\047\000\047\000\000\000\000\000\
\000\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
\047\000\047\000\047\000\047\000\000\000\047\000\047\000\047\000\
\047\000\048\000\048\000\048\000\048\000\048\000\000\000\000\000\
\048\000\048\000\000\000\000\000\000\000\000\000\051\000\000\000\
\000\000\000\000\000\000\000\000\000\000\048\000\048\000\048\000\
\048\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
\048\000\048\000\048\000\048\000\000\000\000\000\000\000\048\000\
\048\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
\048\000\048\000\000\000\048\000\048\000\048\000\048\000\049\000\
\049\000\049\000\049\000\049\000\000\000\000\000\049\000\049\000\
\000\000\000\000\000\000\000\000\052\000\000\000\000\000\000\000\
\000\000\000\000\000\000\049\000\049\000\049\000\049\000\049\000\
\049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
\049\000\049\000\000\000\000\000\000\000\049\000\049\000\049\000\
\049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
\000\000\049\000\049\000\049\000\049\000\050\000\050\000\050\000\
\050\000\050\000\000\000\000\000\050\000\050\000\000\000\000\000\
\000\000\000\000\056\000\000\000\000\000\000\000\000\000\000\000\
\000\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
\050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
\000\000\000\000\000\000\050\000\050\000\050\000\050\000\050\000\
\050\000\050\000\050\000\050\000\050\000\050\000\000\000\050\000\
\050\000\050\000\050\000\045\000\045\000\045\000\045\000\045\000\
\000\000\000\000\045\000\045\000\000\000\000\000\000\000\000\000\
\058\000\000\000\000\000\000\000\000\000\000\000\000\000\045\000\
\045\000\045\000\000\000\000\000\000\000\000\000\045\000\045\000\
\045\000\045\000\045\000\045\000\045\000\045\000\000\000\000\000\
\000\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
\045\000\045\000\045\000\045\000\000\000\045\000\045\000\045\000\
\045\000\046\000\046\000\046\000\046\000\046\000\000\000\000\000\
\046\000\046\000\000\000\000\000\000\000\000\000\059\000\000\000\
\000\000\000\000\000\000\000\000\000\000\046\000\046\000\046\000\
\000\000\000\000\000\000\000\000\046\000\046\000\046\000\046\000\
\046\000\046\000\046\000\046\000\000\000\000\000\000\000\046\000\
\046\000\046\000\046\000\046\000\046\000\046\000\046\000\046\000\
\046\000\046\000\000\000\046\000\046\000\046\000\046\000\051\000\
\051\000\051\000\051\000\051\000\000\000\000\000\051\000\051\000\
\000\000\000\000\000\000\000\000\060\000\000\000\000\000\000\000\
\000\000\000\000\000\000\051\000\000\000\000\000\000\000\000\000\
\000\000\000\000\051\000\051\000\051\000\051\000\051\000\051\000\
\051\000\051\000\000\000\000\000\000\000\051\000\051\000\051\000\
\051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
\000\000\051\000\051\000\051\000\051\000\052\000\052\000\052\000\
\052\000\052\000\000\000\000\000\052\000\052\000\000\000\000\000\
\000\000\000\000\061\000\000\000\000\000\000\000\000\000\000\000\
\000\000\052\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
\000\000\000\000\000\000\052\000\052\000\052\000\052\000\052\000\
\052\000\052\000\052\000\052\000\052\000\052\000\000\000\052\000\
\052\000\052\000\052\000\056\000\056\000\056\000\056\000\056\000\
\000\000\000\000\056\000\056\000\000\000\000\000\000\000\000\000\
\053\000\000\000\000\000\000\000\000\000\000\000\000\000\056\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\056\000\056\000\056\000\056\000\056\000\056\000\000\000\000\000\
\000\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
\056\000\056\000\056\000\056\000\000\000\056\000\056\000\056\000\
\056\000\058\000\058\000\058\000\058\000\058\000\000\000\000\000\
\058\000\058\000\000\000\000\000\000\000\000\000\057\000\000\000\
\000\000\000\000\000\000\000\000\000\000\058\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\058\000\058\000\
\058\000\058\000\058\000\058\000\000\000\000\000\000\000\058\000\
\058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
\058\000\058\000\000\000\058\000\058\000\058\000\058\000\059\000\
\059\000\059\000\059\000\059\000\000\000\000\000\059\000\059\000\
\000\000\000\000\000\000\036\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\059\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\059\000\059\000\059\000\059\000\
\059\000\059\000\000\000\000\000\000\000\059\000\059\000\059\000\
\059\000\059\000\059\000\059\000\059\000\059\000\059\000\059\000\
\000\000\059\000\059\000\059\000\059\000\060\000\060\000\060\000\
\060\000\060\000\035\000\000\000\060\000\060\000\000\000\000\000\
\029\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\060\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\060\000\060\000\060\000\060\000\060\000\060\000\
\000\000\000\000\000\000\060\000\060\000\060\000\060\000\060\000\
\060\000\060\000\060\000\060\000\060\000\060\000\000\000\060\000\
\060\000\060\000\060\000\061\000\061\000\061\000\061\000\061\000\
\000\000\000\000\061\000\061\000\000\000\028\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\061\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\061\000\061\000\061\000\061\000\061\000\061\000\000\000\000\000\
\000\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
\061\000\061\000\061\000\061\000\000\000\061\000\061\000\061\000\
\061\000\053\000\053\000\053\000\053\000\053\000\000\000\000\000\
\053\000\053\000\027\000\013\000\014\000\015\000\016\000\017\000\
\018\000\019\000\020\000\021\000\022\000\053\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\053\000\053\000\
\053\000\053\000\053\000\053\000\000\000\000\000\000\000\053\000\
\053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
\053\000\053\000\000\000\053\000\053\000\053\000\053\000\057\000\
\057\000\057\000\057\000\057\000\000\000\000\000\057\000\057\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\057\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\057\000\057\000\057\000\057\000\
\057\000\057\000\000\000\000\000\000\000\057\000\057\000\057\000\
\057\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
\000\000\057\000\057\000\057\000\057\000\036\000\036\000\036\000\
\036\000\000\000\000\000\036\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\036\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\036\000\036\000\036\000\036\000\036\000\036\000\000\000\
\000\000\000\000\036\000\036\000\036\000\036\000\036\000\036\000\
\036\000\036\000\036\000\036\000\035\000\035\000\036\000\036\000\
\036\000\036\000\029\000\029\000\029\000\000\000\000\000\000\000\
\000\000\000\000\000\000\029\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\029\000\000\000\000\000\
\035\000\035\000\035\000\035\000\035\000\035\000\029\000\029\000\
\000\000\029\000\029\000\029\000\000\000\000\000\000\000\029\000\
\029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
\029\000\000\000\000\000\029\000\029\000\029\000\029\000\028\000\
\028\000\028\000\000\000\000\000\000\000\000\000\000\000\000\000\
\028\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\028\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\028\000\028\000\000\000\000\000\028\000\
\028\000\000\000\000\000\000\000\028\000\028\000\028\000\028\000\
\028\000\028\000\028\000\028\000\028\000\028\000\000\000\000\000\
\028\000\028\000\028\000\028\000\005\000\000\000\006\000\000\000\
\000\000\000\000\000\000\000\000\000\000\007\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\008\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\009\000\010\000\000\000\000\000\011\000\012\000\000\000\000\000\
\000\000\013\000\014\000\015\000\016\000\017\000\018\000\019\000\
\020\000\021\000\022\000\000\000\000\000\023\000\024\000\025\000\
\026\000\005\000\000\000\006\000\000\000\000\000\000\000\000\000\
\000\000\000\000\007\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\008\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\009\000\010\000\000\000\
\000\000\011\000\012\000\000\000\000\000\000\000\013\000\014\000\
\015\000\016\000\017\000\018\000\019\000\020\000\021\000\022\000\
\050\000\000\000\023\000\024\000\025\000\026\000\000\000\000\000\
\000\000\051\000\052\000\053\000\054\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\055\000\056\000\057\000\
\058\000\059\000\060\000\061\000\062\000\000\000\000\000\000\000\
\000\000\068\000\000\000\000\000\000\000\000\000\051\000\052\000\
\053\000\054\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\063\000\055\000\056\000\057\000\058\000\059\000\060\000\
\061\000\062\000\051\000\052\000\053\000\054\000\000\000\000\000\
\000\000\115\000\000\000\051\000\052\000\053\000\054\000\000\000\
\057\000\058\000\059\000\060\000\000\000\000\000\063\000\055\000\
\056\000\057\000\058\000\059\000\060\000\061\000\062\000\051\000\
\052\000\053\000\054\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\063\000\055\000\056\000\057\000\058\000\059\000\
\060\000\061\000\062\000\063\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\051\000\052\000\053\000\054\000\
\000\000\000\000\000\000\000\000\000\000\000\000\069\000\063\000\
\055\000\056\000\057\000\058\000\059\000\060\000\061\000\062\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\051\000\052\000\053\000\054\000\000\000\000\000\000\000\
\000\000\000\000\000\000\071\000\063\000\055\000\056\000\057\000\
\058\000\059\000\060\000\061\000\062\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\051\000\052\000\
\053\000\054\000\000\000\000\000\000\000\000\000\000\000\000\000\
\118\000\063\000\055\000\056\000\057\000\058\000\059\000\060\000\
\061\000\062\000\051\000\052\000\053\000\054\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\055\000\056\000\
\057\000\058\000\059\000\060\000\061\000\000\000\063\000\051\000\
\052\000\053\000\054\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\055\000\056\000\057\000\058\000\059\000\
\060\000\000\000\063\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\063\000"

let yycheck = "\004\000\
\000\000\041\000\004\000\012\001\013\001\004\001\002\001\003\001\
\004\001\001\001\010\001\011\001\012\001\013\001\001\000\011\001\
\004\001\016\001\017\001\018\001\019\001\020\001\005\001\053\001\
\016\001\021\001\009\001\001\001\033\000\005\001\004\001\032\001\
\033\001\009\001\030\001\031\001\053\001\050\001\034\001\035\001\
\008\001\050\001\016\001\006\000\007\000\008\000\009\000\010\000\
\053\001\012\000\050\001\016\001\005\001\009\001\000\000\051\001\
\052\001\053\001\054\001\053\001\005\001\009\001\002\001\053\001\
\069\000\032\001\071\000\069\000\005\001\071\000\001\001\053\001\
\008\001\005\001\120\000\115\000\081\000\005\001\041\000\005\001\
\043\000\044\000\045\000\046\000\047\000\048\000\005\001\005\001\
\051\000\052\000\053\000\054\000\055\000\056\000\057\000\058\000\
\059\000\060\000\061\000\062\000\063\000\106\000\120\000\255\255\
\106\000\255\255\255\255\112\000\000\000\255\255\255\255\255\255\
\255\255\118\000\255\255\120\000\118\000\255\255\123\000\082\000\
\125\000\123\000\127\000\255\255\255\255\127\000\255\255\002\001\
\003\001\004\001\255\255\255\255\255\255\255\255\255\255\098\000\
\011\001\255\255\101\000\255\255\255\255\255\255\255\255\255\255\
\107\000\255\255\021\001\255\255\255\255\255\255\255\255\255\255\
\115\000\255\255\255\255\030\001\031\001\255\255\255\255\034\001\
\035\001\255\255\000\000\255\255\039\001\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\255\255\255\255\
\051\001\052\001\053\001\054\001\002\001\003\001\004\001\255\255\
\255\255\255\255\255\255\255\255\255\255\011\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\004\001\021\001\
\255\255\255\255\255\255\255\255\255\255\011\001\255\255\255\255\
\030\001\031\001\255\255\255\255\034\001\035\001\255\255\021\001\
\000\000\039\001\040\001\041\001\042\001\043\001\044\001\045\001\
\046\001\047\001\048\001\255\255\255\255\051\001\052\001\053\001\
\054\001\039\001\040\001\041\001\042\001\043\001\044\001\045\001\
\046\001\047\001\048\001\255\255\255\255\051\001\052\001\053\001\
\054\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\001\001\002\001\003\001\255\255\005\001\255\255\255\255\
\008\001\009\001\010\001\011\001\012\001\013\001\000\000\255\255\
\255\255\255\255\255\255\255\255\255\255\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\255\255\255\255\255\255\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\049\001\050\001\051\001\052\001\053\001\054\001\001\001\
\002\001\003\001\004\001\005\001\255\255\255\255\008\001\009\001\
\010\001\011\001\012\001\013\001\000\000\255\255\255\255\255\255\
\255\255\255\255\255\255\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\255\255\255\255\255\255\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\255\255\051\001\052\001\053\001\054\001\001\001\002\001\003\001\
\004\001\005\001\255\255\255\255\008\001\009\001\010\001\011\001\
\012\001\013\001\000\000\255\255\255\255\255\255\255\255\255\255\
\255\255\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\032\001\033\001\034\001\035\001\
\255\255\255\255\255\255\039\001\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\048\001\049\001\255\255\051\001\
\052\001\053\001\054\001\001\001\002\001\003\001\004\001\005\001\
\255\255\255\255\008\001\009\001\010\001\011\001\012\001\013\001\
\000\000\255\255\255\255\255\255\255\255\255\255\255\255\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\033\001\034\001\035\001\255\255\255\255\
\255\255\039\001\040\001\041\001\042\001\043\001\044\001\045\001\
\046\001\047\001\048\001\049\001\255\255\051\001\052\001\053\001\
\054\001\001\001\002\001\003\001\004\001\005\001\255\255\255\255\
\008\001\009\001\010\001\011\001\012\001\013\001\000\000\255\255\
\255\255\255\255\255\255\255\255\255\255\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\255\255\255\255\255\255\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\049\001\255\255\051\001\052\001\053\001\054\001\001\001\
\002\001\003\001\004\001\005\001\255\255\255\255\008\001\009\001\
\010\001\011\001\255\255\255\255\000\000\255\255\255\255\255\255\
\255\255\255\255\255\255\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\255\255\255\255\255\255\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\255\255\051\001\052\001\053\001\054\001\001\001\002\001\003\001\
\004\001\005\001\255\255\255\255\008\001\009\001\010\001\011\001\
\255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
\255\255\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\032\001\033\001\034\001\035\001\
\255\255\255\255\255\255\039\001\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\048\001\049\001\255\255\051\001\
\052\001\053\001\054\001\001\001\002\001\003\001\004\001\005\001\
\255\255\255\255\008\001\009\001\255\255\255\255\255\255\255\255\
\000\000\255\255\255\255\255\255\255\255\255\255\255\255\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\030\001\031\001\032\001\033\001\034\001\035\001\255\255\255\255\
\255\255\039\001\040\001\041\001\042\001\043\001\044\001\045\001\
\046\001\047\001\048\001\049\001\255\255\051\001\052\001\053\001\
\054\001\001\001\002\001\003\001\004\001\005\001\255\255\255\255\
\008\001\009\001\255\255\255\255\255\255\255\255\000\000\255\255\
\255\255\255\255\255\255\255\255\255\255\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\255\255\255\255\255\255\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\049\001\255\255\051\001\052\001\053\001\054\001\001\001\
\002\001\003\001\004\001\005\001\255\255\255\255\008\001\009\001\
\255\255\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
\255\255\255\255\255\255\021\001\022\001\023\001\024\001\025\001\
\026\001\027\001\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\255\255\255\255\255\255\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\255\255\051\001\052\001\053\001\054\001\001\001\002\001\003\001\
\004\001\005\001\255\255\255\255\008\001\009\001\255\255\255\255\
\255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
\255\255\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\030\001\031\001\032\001\033\001\034\001\035\001\
\255\255\255\255\255\255\039\001\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\048\001\049\001\255\255\051\001\
\052\001\053\001\054\001\001\001\002\001\003\001\004\001\005\001\
\255\255\255\255\008\001\009\001\255\255\255\255\255\255\255\255\
\000\000\255\255\255\255\255\255\255\255\255\255\255\255\021\001\
\022\001\023\001\255\255\255\255\255\255\255\255\028\001\029\001\
\030\001\031\001\032\001\033\001\034\001\035\001\255\255\255\255\
\255\255\039\001\040\001\041\001\042\001\043\001\044\001\045\001\
\046\001\047\001\048\001\049\001\255\255\051\001\052\001\053\001\
\054\001\001\001\002\001\003\001\004\001\005\001\255\255\255\255\
\008\001\009\001\255\255\255\255\255\255\255\255\000\000\255\255\
\255\255\255\255\255\255\255\255\255\255\021\001\022\001\023\001\
\255\255\255\255\255\255\255\255\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\255\255\255\255\255\255\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\049\001\255\255\051\001\052\001\053\001\054\001\001\001\
\002\001\003\001\004\001\005\001\255\255\255\255\008\001\009\001\
\255\255\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
\255\255\255\255\255\255\021\001\255\255\255\255\255\255\255\255\
\255\255\255\255\028\001\029\001\030\001\031\001\032\001\033\001\
\034\001\035\001\255\255\255\255\255\255\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\255\255\051\001\052\001\053\001\054\001\001\001\002\001\003\001\
\004\001\005\001\255\255\255\255\008\001\009\001\255\255\255\255\
\255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
\255\255\021\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\029\001\030\001\031\001\032\001\033\001\034\001\035\001\
\255\255\255\255\255\255\039\001\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\048\001\049\001\255\255\051\001\
\052\001\053\001\054\001\001\001\002\001\003\001\004\001\005\001\
\255\255\255\255\008\001\009\001\255\255\255\255\255\255\255\255\
\000\000\255\255\255\255\255\255\255\255\255\255\255\255\021\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\030\001\031\001\032\001\033\001\034\001\035\001\255\255\255\255\
\255\255\039\001\040\001\041\001\042\001\043\001\044\001\045\001\
\046\001\047\001\048\001\049\001\255\255\051\001\052\001\053\001\
\054\001\001\001\002\001\003\001\004\001\005\001\255\255\255\255\
\008\001\009\001\255\255\255\255\255\255\255\255\000\000\255\255\
\255\255\255\255\255\255\255\255\255\255\021\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\030\001\031\001\
\032\001\033\001\034\001\035\001\255\255\255\255\255\255\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\049\001\255\255\051\001\052\001\053\001\054\001\001\001\
\002\001\003\001\004\001\005\001\255\255\255\255\008\001\009\001\
\255\255\255\255\255\255\000\000\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\021\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\030\001\031\001\032\001\033\001\
\034\001\035\001\255\255\255\255\255\255\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\255\255\051\001\052\001\053\001\054\001\001\001\002\001\003\001\
\004\001\005\001\000\000\255\255\008\001\009\001\255\255\255\255\
\000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\021\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\030\001\031\001\032\001\033\001\034\001\035\001\
\255\255\255\255\255\255\039\001\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\048\001\049\001\255\255\051\001\
\052\001\053\001\054\001\001\001\002\001\003\001\004\001\005\001\
\255\255\255\255\008\001\009\001\255\255\000\000\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\021\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\030\001\031\001\032\001\033\001\034\001\035\001\255\255\255\255\
\255\255\039\001\040\001\041\001\042\001\043\001\044\001\045\001\
\046\001\047\001\048\001\049\001\255\255\051\001\052\001\053\001\
\054\001\001\001\002\001\003\001\004\001\005\001\255\255\255\255\
\008\001\009\001\000\000\039\001\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\048\001\021\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\030\001\031\001\
\032\001\033\001\034\001\035\001\255\255\255\255\255\255\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\049\001\255\255\051\001\052\001\053\001\054\001\001\001\
\002\001\003\001\004\001\005\001\255\255\255\255\008\001\009\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\021\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\030\001\031\001\032\001\033\001\
\034\001\035\001\255\255\255\255\255\255\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\255\255\051\001\052\001\053\001\054\001\002\001\003\001\004\001\
\005\001\255\255\255\255\008\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\021\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\030\001\031\001\032\001\033\001\034\001\035\001\255\255\
\255\255\255\255\039\001\040\001\041\001\042\001\043\001\044\001\
\045\001\046\001\047\001\048\001\002\001\003\001\051\001\052\001\
\053\001\054\001\002\001\003\001\004\001\255\255\255\255\255\255\
\255\255\255\255\255\255\011\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\021\001\255\255\255\255\
\030\001\031\001\032\001\033\001\034\001\035\001\030\001\031\001\
\255\255\033\001\034\001\035\001\255\255\255\255\255\255\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\255\255\255\255\051\001\052\001\053\001\054\001\002\001\
\003\001\004\001\255\255\255\255\255\255\255\255\255\255\255\255\
\011\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\021\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\030\001\031\001\255\255\255\255\034\001\
\035\001\255\255\255\255\255\255\039\001\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\255\255\255\255\
\051\001\052\001\053\001\054\001\002\001\255\255\004\001\255\255\
\255\255\255\255\255\255\255\255\255\255\011\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\021\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\030\001\031\001\255\255\255\255\034\001\035\001\255\255\255\255\
\255\255\039\001\040\001\041\001\042\001\043\001\044\001\045\001\
\046\001\047\001\048\001\255\255\255\255\051\001\052\001\053\001\
\054\001\002\001\255\255\004\001\255\255\255\255\255\255\255\255\
\255\255\255\255\011\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\021\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\030\001\031\001\255\255\
\255\255\034\001\035\001\255\255\255\255\255\255\039\001\040\001\
\041\001\042\001\043\001\044\001\045\001\046\001\047\001\048\001\
\001\001\255\255\051\001\052\001\053\001\054\001\255\255\255\255\
\255\255\010\001\011\001\012\001\013\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\255\255\255\255\255\255\
\255\255\005\001\255\255\255\255\255\255\255\255\010\001\011\001\
\012\001\013\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\050\001\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\010\001\011\001\012\001\013\001\255\255\255\255\
\255\255\008\001\255\255\010\001\011\001\012\001\013\001\255\255\
\024\001\025\001\026\001\027\001\255\255\255\255\050\001\022\001\
\023\001\024\001\025\001\026\001\027\001\028\001\029\001\010\001\
\011\001\012\001\013\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\050\001\022\001\023\001\024\001\025\001\026\001\
\027\001\028\001\029\001\050\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\010\001\011\001\012\001\013\001\
\255\255\255\255\255\255\255\255\255\255\255\255\049\001\050\001\
\022\001\023\001\024\001\025\001\026\001\027\001\028\001\029\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\010\001\011\001\012\001\013\001\255\255\255\255\255\255\
\255\255\255\255\255\255\049\001\050\001\022\001\023\001\024\001\
\025\001\026\001\027\001\028\001\029\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\010\001\011\001\
\012\001\013\001\255\255\255\255\255\255\255\255\255\255\255\255\
\049\001\050\001\022\001\023\001\024\001\025\001\026\001\027\001\
\028\001\029\001\010\001\011\001\012\001\013\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\022\001\023\001\
\024\001\025\001\026\001\027\001\028\001\255\255\050\001\010\001\
\011\001\012\001\013\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\022\001\023\001\024\001\025\001\026\001\
\027\001\255\255\050\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\050\001"

let yynames_const = "\
  SEQUENCE\000\
  LBLOCK\000\
  RBLOCK\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  SEMI\000\
  COMMA\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  EXPONENT\000\
  MODULUS\000\
  ASSIGN\000\
  ASSIGNADD\000\
  ASSIGNMINUS\000\
  ASSIGNTIMES\000\
  ASSIGNDIVIDE\000\
  NOT\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  AND\000\
  OR\000\
  RETURN\000\
  IF\000\
  ELSE\000\
  ELIF\000\
  FOR\000\
  WHILE\000\
  BREAK\000\
  CONTINUE\000\
  DEF\000\
  INT\000\
  BOOL\000\
  FLOAT\000\
  VOID\000\
  CHAR\000\
  STRING\000\
  LIST\000\
  IMAGE\000\
  PIXEL\000\
  MATRIX\000\
  COLON\000\
  CONV\000\
  EOF\000\
  "

let yynames_block = "\
  LITERAL\000\
  BLIT\000\
  ID\000\
  FLIT\000\
  LITERALSTRING\000\
  LITERALCHAR\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    Obj.repr(
# 35 "parser.mly"
            ( _1 )
# 781 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 38 "parser.mly"
                 ( ([], [])               )
# 787 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 39 "parser.mly"
              ( ((_2 :: fst _1), snd _1) )
# 795 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 40 "parser.mly"
               ( (fst _1, (_2 :: snd _1)) )
# 803 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 8 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 5 : 'formals_opt) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'vdecl_list) in
    let _8 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 44 "parser.mly"
     ( { typ = _1;
	 fname = _2;
	 formals = _4;
	 locals = List.rev _7;
	 body = List.rev _8 } )
# 818 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 51 "parser.mly"
                  ( [] )
# 824 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 52 "parser.mly"
                  ( List.rev _1 )
# 831 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 55 "parser.mly"
                             ( [(_1,_2)]     )
# 839 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 56 "parser.mly"
                             ( (_3,_4) :: _1 )
# 848 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 59 "parser.mly"
          ( Int   )
# 854 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 60 "parser.mly"
          ( Bool  )
# 860 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 61 "parser.mly"
          ( Float )
# 866 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 62 "parser.mly"
          ( Void  )
# 872 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 63 "parser.mly"
          ( Char )
# 878 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 64 "parser.mly"
          ( List )
# 884 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 65 "parser.mly"
           ( String )
# 890 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 66 "parser.mly"
           ( Image )
# 896 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 67 "parser.mly"
           ( Pixel )
# 902 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 68 "parser.mly"
           ( Matrix )
# 908 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 71 "parser.mly"
                     ( [] )
# 914 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'vdecl_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 72 "parser.mly"
                     ( _2 :: _1 )
# 922 "parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 75 "parser.mly"
                   ( (_1, _2) )
# 930 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 78 "parser.mly"
                   ( [] )
# 936 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 79 "parser.mly"
                   ( _2 :: _1 )
# 944 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 83 "parser.mly"
                                            ( Expr _1               )
# 951 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr_opt) in
    Obj.repr(
# 84 "parser.mly"
                                            ( Return _2             )
# 958 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 85 "parser.mly"
                                            ( Block(List.rev _2)    )
# 965 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 86 "parser.mly"
                                    ( If(_2, _4, Block([])) )
# 973 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'stmt) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 87 "parser.mly"
                                               ( If(_2, _4, If(_6, _8, Block([])))  )
# 983 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 8 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 6 : 'stmt) in
    let _6 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _8 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _10 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 88 "parser.mly"
                                                       ( If(_2, _4, If(_6, _8, _10))  )
# 994 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 89 "parser.mly"
                                    ( If(_2, _4, _6)        )
# 1003 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'expr_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'expr_opt) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 91 "parser.mly"
                                            ( For(_3, _5, _7, _9)   )
# 1013 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 92 "parser.mly"
                                    ( While(_2, _4)         )
# 1021 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 93 "parser.mly"
                                            ( Declare(fst _1, snd _1) )
# 1028 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 96 "parser.mly"
     ( Noexpr )
# 1034 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 97 "parser.mly"
                  ( _1 )
# 1041 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 100 "parser.mly"
                     ( Literal(_1)            )
# 1048 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 101 "parser.mly"
              ( Fliteral(_1)           )
# 1055 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 102 "parser.mly"
                     ( BoolLit(_1)            )
# 1062 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 103 "parser.mly"
                     ( Id(_1)                 )
# 1069 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 104 "parser.mly"
                     ( Binop(_1, Add,   _3)   )
# 1077 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 105 "parser.mly"
                     ( Binop(_1, Sub,   _3)   )
# 1085 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 106 "parser.mly"
                     ( Binop(_1, Mult,  _3)   )
# 1093 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 107 "parser.mly"
                     ( Binop(_1, Div,   _3)   )
# 1101 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 108 "parser.mly"
                     ( Binop(_1, Equal, _3)   )
# 1109 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 109 "parser.mly"
                     ( Binop(_1, Neq,   _3)   )
# 1117 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 110 "parser.mly"
                     ( Binop(_1, Less,  _3)   )
# 1125 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 111 "parser.mly"
                     ( Binop(_1, Leq,   _3)   )
# 1133 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 112 "parser.mly"
                     ( Binop(_1, Greater, _3) )
# 1141 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 113 "parser.mly"
                     ( Binop(_1, Geq,   _3)   )
# 1149 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 114 "parser.mly"
                     ( Binop(_1, And,   _3)   )
# 1157 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 115 "parser.mly"
                     ( Binop(_1, Or,    _3)   )
# 1165 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 116 "parser.mly"
                       ( Binop(_1, Conv,    _3)   )
# 1173 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 117 "parser.mly"
                         ( Unop(Neg, _2)      )
# 1180 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 118 "parser.mly"
                     ( Unop(Not, _2)          )
# 1187 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 119 "parser.mly"
                     ( Assign(_1, _3)         )
# 1195 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 120 "parser.mly"
                         ( DeclAssign(_1, _2, _4)         )
# 1204 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 121 "parser.mly"
                        ( AssignAdd(_1, _3)       )
# 1212 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 122 "parser.mly"
                          ( AssignMinus(_1, _3)    )
# 1220 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 123 "parser.mly"
                          ( AssignTimes(_1, _3)     )
# 1228 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 124 "parser.mly"
                           ( AssignDivide(_1, _3) )
# 1236 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'args_opt) in
    Obj.repr(
# 125 "parser.mly"
                              ( Call(_1, _3)  )
# 1244 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 126 "parser.mly"
                       ( _2                   )
# 1251 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 129 "parser.mly"
                  ( [] )
# 1257 "parser.ml"
               : 'args_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'args_list) in
    Obj.repr(
# 130 "parser.mly"
               ( List.rev _1 )
# 1264 "parser.ml"
               : 'args_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 133 "parser.mly"
                            ( [_1] )
# 1271 "parser.ml"
               : 'args_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'args_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 134 "parser.mly"
                         ( _3 :: _1 )
# 1279 "parser.ml"
               : 'args_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
